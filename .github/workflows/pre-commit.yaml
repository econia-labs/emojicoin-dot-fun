# cspell:word pydeps
# cspell:word pylint
# cspell:word snok
# cspell:word venv
# cspell:word virtualenvs
---
env:
  POETRY_VERSION: '1.8.2'
  PYTHON_VERSION: '3.10'
  TS_DIR: 'src/typescript'
jobs:
  pre-commit:
    runs-on: 'ubuntu-latest'
    steps:
    - uses: 'actions/checkout@v4'
    - run: 'git submodule update --init --recursive src/rust/processor'
    - id: 'setup-python'
      uses: 'actions/setup-python@v5'
      with:
        python-version: '${{ env.PYTHON_VERSION }}'
    - name: 'Install libdw-dev'
      run: |
        sudo apt-get update
        sudo apt-get install -y libdw-dev
    - uses: './.github/actions/pnpm-install'
    - name: 'Install Poetry'
      uses: 'snok/install-poetry@v1.4.1'
      with:
        installer-parallel: true
        version: '${{ env.POETRY_VERSION }}'
        virtualenvs-create: true
        virtualenvs-in-project: true
    - id: 'restore-deps'
      uses: 'actions/cache/restore@v4'
      with:
        key: >-
          pydeps-${{ runner.os }}-\
          ${{ steps.setup-python.outputs.python-version }}-\
          ${{ hashFiles('./src/python/hooks/poetry.lock') }}
        path: './src/python/hooks/.venv'
    - if: |
        steps.restore-deps.outputs.cache-hit != 'true'
      name: 'Install Dependencies'
      run: |
        cd ./src/python/hooks
        poetry install --no-interaction --no-root
    - id: 'save-deps'
      uses: 'actions/cache/save@v4'
      with:
        # Same key in `restore-deps`.
        key: >-
          pydeps-${{ runner.os }}-\
          ${{ steps.setup-python.outputs.python-version }}-\
          ${{ hashFiles('./src/python/hooks/poetry.lock') }}
        path: './src/python/hooks/.venv'
    - uses: 'pre-commit/action@v3.0.1'
      with:
        extra_args: '--all-files --config cfg/pre-commit-config.yaml'
name: 'pre-commit'
'on':
  merge_group: null
  pull_request: null
  push:
    branches:
    - 'main'
    - 'production'
  workflow_dispatch: null
...
