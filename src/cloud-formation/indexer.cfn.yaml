# cspell:word aarch
# cspell:word awslogs
# cspell:word awsvpc
# cspell:word fargate
# cspell:word multivalue
# cspell:word pullthroughcache
---
Conditions:
  MaybeDeployAlb: !And
  - !Condition 'MaybeDeployVpc'
  - !Equals
    - !Ref 'MaybeDeployAlb'
    - 'true'
  MaybeDeployAlbDnsRecord: !And
  - !Condition 'MaybeDeployAlb'
  - !Equals
    - !Ref 'MaybeDeployAlbDnsRecord'
    - 'true'
  MaybeDeployBastionHost: !And
  - !Condition 'MaybeDeployDb'
  - !Equals
    - !Ref 'MaybeDeployBastionHost'
    - 'true'
  MaybeDeployBroker: !And
  - !Condition 'MaybeDeployContainers'
  - !Condition 'MaybeDeployProcessor'
  - !Equals
    - !Ref 'MaybeDeployBroker'
    - 'true'
  MaybeDeployContainers: !And
  - !Condition 'MaybeDeployDb'
  - !Condition 'MaybeDeployRouteTables'
  - !Equals
    - !Ref 'MaybeDeployContainers'
    - 'true'
  MaybeDeployDb: !And
  - !Condition 'MaybeDeployVpc'
  - !Equals
    - !Ref 'MaybeDeployDb'
    - 'true'
  MaybeDeployPostgrest: !And
  - !Condition 'MaybeDeployContainers'
  - !Condition 'MaybeDeployProcessor'
  - !Equals
    - !Ref 'MaybeDeployPostgrest'
    - 'true'
  MaybeDeployProcessor: !And
  - !Condition 'MaybeDeployContainers'
  - !Equals
    - !Ref 'MaybeDeployProcessor'
    - 'true'
  MaybeDeployRouteTables: !And
  - !Condition 'MaybeDeployVpc'
  - !Equals
    - !Ref 'MaybeDeployRouteTables'
    - 'true'
  MaybeDeployStack: !Equals
  - !Ref 'MaybeDeployStack'
  - 'true'
  MaybeDeployVpc: !And
  - !Condition 'MaybeDeployStack'
  - !Equals
    - !Ref 'MaybeDeployVpc'
    - 'true'
Mappings:
  Constants:
    # These compromised credentials are not a security risk because access to
    # the database is restricted to security groups in the VPC.
    DatabaseConfig:
      DatabaseName: 'emojicoin'
      MasterPassword: 'emojicoin'
      MasterUsername: 'emojicoin'
    ImageCache:
      RepositoryPrefix: 'emojicoin'
    Logging:
      Prefix: 'emojicoin'
    Networking:
      BrokerPort: 3009
      DatabasePort: 5432
      DnsNameHostedZoneId:
        '{{resolve:ssm:/emojicoin/indexer-dns-name/hosted-zone-id}}'
      DnsNameRootDomain:
        '{{resolve:ssm:/emojicoin/indexer-dns-name/root-domain}}'
      DnsNameSubdomain: 'data'
      PostgrestHealthCheckPort: 3001
      PostgrestPort: 3000
      ProcessorWebsocketPort: 3008
      VpcCidrBlock: '10.0.0.0/16'
    Websocat:
      Build: 'websocat.aarch64-unknown-linux-musl'
      ReleaseUrlBase: 'https://github.com/vi/websocat/releases/download'
      Version: 'v1.13.0'
  PrivateSubnets:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.1.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.2.0/24'
    C:
      AvailabilityZone: 2
      CidrBlock: '10.0.3.0/24'
  PublicSubnets:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.4.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.5.0/24'
    C:
      AvailabilityZone: 2
      CidrBlock: '10.0.6.0/24'
Outputs:
  BastionHostId:
    Condition: 'MaybeDeployBastionHost'
    Description: 'The instance ID of the bastion host.'
    Value: !Ref 'BastionHost'
  DnsName:
    Condition: 'MaybeDeployAlbDnsRecord'
    Value: !Sub
    - '${Environment}.${Subdomain}.${RootDomain}'
    - RootDomain: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'DnsNameRootDomain'
      Subdomain: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'DnsNameSubdomain'
Parameters:
  BastionHostAmiId:
    Default: 'ami-030cb86c12b18e236'
    Type: 'AWS::EC2::Image::Id'
  BrokerImageVersion:
    Type: 'String'
  DbMaxCapacity:
    Default: 4
    Type: 'Number'
  DbMinCapacity:
    Default: 0.5
    Type: 'Number'
  Environment:
    Type: 'String'
  MaybeDeployAlb:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployAlbDnsRecord:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployBastionHost:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployBroker:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployContainers:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployDb:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployPostgrest:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployProcessor:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployRouteTables:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployStack:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  MaybeDeployVpc:
    AllowedValues:
    - 'false'
    - 'true'
    Type: 'String'
  Network:
    AllowedValues:
    - 'mainnet'
    - 'testnet'
    Type: 'String'
  PostgrestImageVersion:
    Default: 'v12.2.3'
    Type: 'String'
  PostgrestMaxRows:
    Default: 500
    Type: 'Number'
  ProcessorImageVersion:
    Type: 'String'
Resources:
  # Public application load balancer.
  Alb:
    Condition: 'MaybeDeployAlb'
    Properties:
      LoadBalancerAttributes:
      - Key: 'load_balancing.cross_zone.enabled'
        Value: 'true'
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref 'AlbSecurityGroup'
      - !If
        - 'MaybeDeployBroker'
        - !Ref 'BrokerWsClientSecurityGroup'
        - !Ref 'AWS::NoValue'
      - !If
        - 'MaybeDeployPostgrest'
        - !Ref 'PostgrestClientSecurityGroup'
        - !Ref 'AWS::NoValue'
      Subnets:
      - !Ref 'PublicSubnetA'
      - !Ref 'PublicSubnetB'
      - !Ref 'PublicSubnetC'
      Type: 'application'
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  # DNS certificate for the application load balancer.
  AlbCertificate:
    Condition: 'MaybeDeployAlb'
    Properties:
      DomainName: !Sub
      - '${Environment}.${Subdomain}.${RootDomain}'
      - RootDomain: !FindInMap
        - 'Constants'
        - 'Networking'
        - 'DnsNameRootDomain'
        Subdomain: !FindInMap
        - 'Constants'
        - 'Networking'
        - 'DnsNameSubdomain'
      DomainValidationOptions:
      - DomainName: !Sub
        - '${Environment}.${Subdomain}.${RootDomain}'
        - RootDomain: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'DnsNameRootDomain'
          Subdomain: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'DnsNameSubdomain'
        HostedZoneId: !FindInMap
        - 'Constants'
        - 'Networking'
        - 'DnsNameHostedZoneId'
      ValidationMethod: 'DNS'
    Type: 'AWS::CertificateManager::Certificate'
  # DNS record for the broker's application load balancer.
  AlbDnsRecord:
    Condition: 'MaybeDeployAlbDnsRecord'
    Properties:
      AliasTarget:
        DNSName: !GetAtt 'Alb.DNSName'
        HostedZoneId: !GetAtt 'Alb.CanonicalHostedZoneID'
      HostedZoneId: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'DnsNameHostedZoneId'
      Name: !Sub
      - '${Environment}.${Subdomain}.${RootDomain}'
      - RootDomain: !FindInMap
        - 'Constants'
        - 'Networking'
        - 'DnsNameRootDomain'
        Subdomain: !FindInMap
        - 'Constants'
        - 'Networking'
        - 'DnsNameSubdomain'
      Type: 'A'
    Type: 'AWS::Route53::RecordSet'
  # Application load balancer listener.
  AlbListener:
    Condition: 'MaybeDeployAlb'
    Properties:
      Certificates:
      - CertificateArn: !Ref 'AlbCertificate'
      DefaultActions:
      - TargetGroupArn: !Ref 'PostgrestAlbTargetGroup'
        Type: 'forward'
      LoadBalancerArn: !Ref 'Alb'
      Port: 443
      Protocol: 'HTTPS'
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
  # Application load balancer listener rule for broker traffic.
  AlbListenerRuleBrokerTarget:
    Condition: 'MaybeDeployAlb'
    Properties:
      Actions:
      - TargetGroupArn: !Ref 'BrokerAlbTargetGroup'
        Type: 'forward'
      Conditions:
      - Field: 'path-pattern'
        Values:
        - '/ws'
      ListenerArn: !Ref 'AlbListener'
      Priority: 1
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  # Security group for the application load balancer.
  AlbSecurityGroup:
    Condition: 'MaybeDeployAlb'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        FromPort: 443
        IpProtocol: 'tcp'
        ToPort: 443
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Minimal VM for monitoring internal processes.
  BastionHost:
    Condition: 'MaybeDeployBastionHost'
    Properties:
      ImageId: !Ref 'BastionHostAmiId'
      InstanceType: 't4g.nano'
      NetworkInterfaces:
      - DeviceIndex: 0
        GroupSet:
        - !Ref 'BastionHostSecurityGroup'
        - !Ref 'DbUserSecurityGroup'
        - !If
          - 'MaybeDeployBroker'
          - !Ref 'BrokerWsClientSecurityGroup'
          - !Ref 'AWS::NoValue'
        - !If
          - 'MaybeDeployPostgrest'
          - !Ref 'PostgrestClientSecurityGroup'
          - !Ref 'AWS::NoValue'
        - !If
          - 'MaybeDeployProcessor'
          - !Ref 'ProcessorWsClientSecurityGroup'
          - !Ref 'AWS::NoValue'
        SubnetId: !Ref 'PrivateSubnetA'
      UserData:
        # Install PostgreSQL client & websocat, set connection strings.
        Fn::Base64: !Sub
        - |
            #!/bin/bash
            yum update -y
            amazon-linux-extras enable postgresql14
            yum clean metadata
            yum install -y postgresql
            wget ${WebsocatReleaseUrlBase}/${WebsocatVersion}/${WebsocatBuild}
            chmod +x ${WebsocatBuild}
            mv ${WebsocatBuild} /usr/local/bin/websocat
            echo 'export DB_URL="${DatabaseUrl}"' >> /etc/profile
            echo '${BrokerWsUrlExport}' >> /etc/profile
            echo '${PostgrestUrlExport}' >> /etc/profile
            echo '${ProcessorWsUrlExport}' >> /etc/profile
        - BrokerWsUrlExport: !If
          - 'MaybeDeployBroker'
          - !Join
            - ''
            - - 'export BROKER_WS_URL="ws://'
              - !GetAtt 'BrokerServiceDiscovery.Name'
              - '.'
              - !Ref 'AWS::StackName'
              - ':'
              - !FindInMap
                - 'Constants'
                - 'Networking'
                - 'BrokerPort'
              - '/ws"'
          - '# BROKER_WS_URL not set (broker not provisioned)'
          DatabaseUrl: !Join
          - ''
          - - 'postgres://'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
            - ':'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterPassword'
            - '@'
            - !GetAtt 'DbCluster.ReadEndpoint.Address'
            - '/'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'DatabaseName'
          PostgrestUrlExport: !If
          - 'MaybeDeployPostgrest'
          - !Join
            - ''
            - - 'export POSTGREST_URL="http://'
              - !GetAtt 'PostgrestServiceDiscovery.Name'
              - '.'
              - !Ref 'AWS::StackName'
              - ':'
              - !FindInMap
                - 'Constants'
                - 'Networking'
                - 'PostgrestPort'
              - '"'
          - '# POSTGREST_URL not set (PostgREST not provisioned)'
          ProcessorWsUrlExport: !If
          - 'MaybeDeployProcessor'
          - !Join
            - ''
            - - 'export PROCESSOR_WS_URL="ws://'
              - !GetAtt 'ProcessorServiceDiscovery.Name'
              - '.'
              - !Ref 'AWS::StackName'
              - ':'
              - !FindInMap
                - 'Constants'
                - 'Networking'
                - 'ProcessorWebsocketPort'
              - '/ws"'
          - '# PROCESSOR_WS_URL not set (processor not provisioned)'
          WebsocatBuild: !FindInMap
          - 'Constants'
          - 'Websocat'
          - 'Build'
          WebsocatReleaseUrlBase: !FindInMap
          - 'Constants'
          - 'Websocat'
          - 'ReleaseUrlBase'
          WebsocatVersion: !FindInMap
          - 'Constants'
          - 'Websocat'
          - 'Version'
    Type: 'AWS::EC2::Instance'
  # Connection endpoint allowing access to the bastion host.
  BastionHostConnectionEndpoint:
    Condition: 'MaybeDeployBastionHost'
    Properties:
      PreserveClientIp: true
      SecurityGroupIds:
      - !Ref 'BastionHostConnectionEndpointSecurityGroup'
      SubnetId: !Ref 'PrivateSubnetA'
    Type: 'AWS::EC2::InstanceConnectEndpoint'
  # Security group for bastion host connection endpoint.
  BastionHostConnectionEndpointSecurityGroup:
    Condition: 'MaybeDeployBastionHost'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'BastionHostSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Security group for the bastion host.
  BastionHostSecurityGroup:
    Condition: 'MaybeDeployBastionHost'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the bastion host security group, separated to eliminate
  # circular dependencies with the security group for the connection endpoint.
  BastionHostSecurityGroupIngress:
    Condition: 'MaybeDeployBastionHost'
    Properties:
      GroupId: !Ref 'BastionHostSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId:
        !Ref 'BastionHostConnectionEndpointSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Target group for application load balancer traffic to the broker.
  BrokerAlbTargetGroup:
    Condition: 'MaybeDeployAlb'
    DependsOn: 'Alb'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: '/'
      HealthCheckPort: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'BrokerPort'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Name: !Sub '${AWS::StackName}-broker'
      Port: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'BrokerPort'
      Protocol: 'HTTP'
      ProtocolVersion: 'HTTP1'
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: '30'
      - Key: 'stickiness.enabled'
        Value: 'true'
      - Key: 'stickiness.type'
        Value: 'lb_cookie'
      TargetType: 'ip'
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'Vpc'
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  # Scaling policy for broker service.
  BrokerAutoScalingPolicy:
    Condition: 'MaybeDeployBroker'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-broker'
      PolicyType: 'TargetTrackingScaling'
      ScalingTargetId: !Ref 'BrokerAutoScalingTarget'
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'ECSServiceAverageCPUUtilization'
        ScaleInCooldown: 300
        ScaleOutCooldown: 60
        TargetValue: 70
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
  # Scalable target for broker service.
  BrokerAutoScalingTarget:
    Condition: 'MaybeDeployBroker'
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Join
      - '/'
      - - 'service'
        - !Ref 'ContainerCluster'
        - !GetAtt 'BrokerRunner.Name'
      RoleARN: !GetAtt 'ContainerRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
  # Security group for the broker's WebSocket server.
  BrokerPublisherSecurityGroup:
    Condition: 'MaybeDeployBroker'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the broker's WebSocket server security group.
  BrokerPublisherSecurityGroupIngress:
    Condition: 'MaybeDeployBroker'
    Properties:
      GroupId: !Ref 'BrokerPublisherSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'BrokerWsClientSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Service for running the broker.
  BrokerRunner:
    Condition: 'MaybeDeployBroker'
    DependsOn:
    # Wait until processor server is online.
    - 'ProcessorRunner'
    # Wait until there is an outbound route to get the image from the
    # pull through cache.
    - 'PrivateRouteTableAssociationA'
    - 'PrivateRouteTableAssociationB'
    - 'PrivateRouteTableAssociationC'
    - 'PrivateRouteThroughNatGateway'
    # Proxy for a conditional dependency on the application load balancer
    # listener rule for the broker, which associates the broker target group
    # with the application load balancer.
    Metadata:
      ConditionalDependencyProxy: !If
      - 'MaybeDeployAlb'
      - !Ref 'AlbListenerRuleBrokerTarget'
      - ''
    Properties:
      Cluster: !Ref 'ContainerCluster'
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      LaunchType: 'FARGATE'
      LoadBalancers: !If
      - 'MaybeDeployAlb'
      - - ContainerName: !Sub '${AWS::StackName}-broker'
          ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'BrokerPort'
          TargetGroupArn: !Ref 'BrokerAlbTargetGroup'
      - !Ref 'AWS::NoValue'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !Ref 'BrokerPublisherSecurityGroup'
          - !Ref 'ContainerSecurityGroup'
          - !Ref 'ProcessorWsClientSecurityGroup'
          Subnets:
          - !Ref 'PrivateSubnetA'
          - !Ref 'PrivateSubnetB'
          - !Ref 'PrivateSubnetC'
      ServiceRegistries:
      - RegistryArn: !GetAtt 'BrokerServiceDiscovery.Arn'
      TaskDefinition: !Ref 'BrokerTask'
    Type: 'AWS::ECS::Service'
  # Service discovery for the broker.
  BrokerServiceDiscovery:
    Condition: 'MaybeDeployBroker'
    Properties:
      DnsConfig:
        DnsRecords:
        - TTL: 10
          Type: 'A'
        RoutingPolicy: 'MULTIVALUE'
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Sub '${AWS::StackName}-broker'
      NamespaceId: !Ref 'PrivateServiceDiscoveryNamespace'
    Type: 'AWS::ServiceDiscovery::Service'
  # Task definition for the broker.
  BrokerTask:
    Condition: 'MaybeDeployBroker'
    DependsOn: 'ContainerLogGroup'
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: 'PROCESSOR_WS_URL'
          Value: !Join
          - ''
          - - 'ws://'
            - !GetAtt 'ProcessorServiceDiscovery.Name'
            - '.'
            - !Ref 'AWS::StackName'
            - ':'
            - !FindInMap
              - 'Constants'
              - 'Networking'
              - 'ProcessorWebsocketPort'
            - '/ws'
        - Name: 'PORT'
          Value: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'BrokerPort'
        - Name: 'RUST_LOG'
          Value: 'info'
        HealthCheck:
          Command:
          - 'CMD'
          - 'curl'
          - '--fail'
          - !Sub
            - 'http://localhost:${PORT}/'
            - PORT: !FindInMap
              - 'Constants'
              - 'Networking'
              - 'BrokerPort'
          Interval: 5
          Retries: 1
          StartPeriod: 0
          Timeout: 2
        Image: !Join
        - ''
        - - !Ref 'AWS::AccountId'
          - '.dkr.ecr.'
          - !Ref 'AWS::Region'
          - '.amazonaws.com/'
          - !FindInMap
            - 'Constants'
            - 'ImageCache'
            - 'RepositoryPrefix'
          - '/econialabs/emojicoin-dot-fun-indexer-broker:'
          - !Ref 'BrokerImageVersion'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Join
            - ''
            - - '/'
              - !FindInMap
                - 'Constants'
                - 'Logging'
                - 'Prefix'
              - '/'
              - !Ref 'AWS::StackName'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !FindInMap
            - 'Constants'
            - 'Logging'
            - 'Prefix'
        Name: !Sub '${AWS::StackName}-broker'
        PortMappings:
        - ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'BrokerPort'
          HostPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'BrokerPort'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ContainerRole.Arn'
      Family: !Ref 'AWS::StackName'
      Memory: '512'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
      - 'FARGATE'
    Type: 'AWS::ECS::TaskDefinition'
  # Security group for clients of the broker's WebSocket server.
  BrokerWsClientSecurityGroup:
    Condition: 'MaybeDeployBroker'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'BrokerPublisherSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Cluster for running ECS containers.
  ContainerCluster:
    Condition: 'MaybeDeployContainers'
    Type: 'AWS::ECS::Cluster'
  # Log group for ECS task logging.
  ContainerLogGroup:
    Condition: 'MaybeDeployContainers'
    Properties:
      LogGroupName: !Join
      - ''
      - - '/'
        - !FindInMap
          - 'Constants'
          - 'Logging'
          - 'Prefix'
        - '/'
        - !Ref 'AWS::StackName'
      RetentionInDays: 7
    Type: 'AWS::Logs::LogGroup'
  # Role with assorted permissions required to run containers.
  ContainerRole:
    Condition: 'MaybeDeployContainers'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: 'Allow'
          Principal:
            Service: 'application-autoscaling.amazonaws.com'
        - Action: 'sts:AssumeRole'
          Effect: 'Allow'
          Principal:
            Service: 'ecs-tasks.amazonaws.com'
      ManagedPolicyArns:
      - !Join
        - ''
        - - 'arn:aws:iam::aws:policy/service-role/'
          - 'AmazonEC2ContainerServiceAutoscaleRole'
      Policies:
      - PolicyDocument:
          Statement:
          # Pull through cache permissions.
          - Action:
            - 'ecr:BatchCheckLayerAvailability'
            - 'ecr:BatchGetImage'
            - 'ecr:BatchImportUpstreamImage'
            - 'ecr:CompleteLayerUpload'
            - 'ecr:CreateRepository'
            - 'ecr:DescribeImages'
            - 'ecr:DescribeRepositories'
            - 'ecr:GetAuthorizationToken'
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:InitiateLayerUpload'
            - 'ecr:PutImage'
            - 'ecr:UploadLayerPart'
            Effect: 'Allow'
            Resource: !Join
            - ''
            - - 'arn:aws:ecr:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':repository/'
              - !FindInMap
                - 'Constants'
                - 'ImageCache'
                - 'RepositoryPrefix'
              - '/*'
          - Action:
            - 'ecr:GetAuthorizationToken'
            Effect: 'Allow'
            Resource: '*'
          # Container logging permissions.
          - Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Effect: 'Allow'
            Resource: !Join
            - ''
            - - 'arn:aws:logs:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':log-group:/'
              - !FindInMap
                - 'Constants'
                - 'Logging'
                - 'Prefix'
              - '/'
              - !Ref 'AWS::StackName'
              - ':*'
          # Secret access permissions.
          - Action:
            - 'secretsmanager:GetSecretValue'
            Effect: 'Allow'
            Resource:
            - !Join
              - ''
              - - 'arn:aws:secretsmanager:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':secret:emojicoin/grpc-auth-token-*'
            - !Join
              - ''
              - - 'arn:aws:secretsmanager:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':secret:ecr-pullthroughcache/emojicoin/docker-hub-*'
        PolicyName: !Sub 'EmojicoinContainerRolePolicy-${AWS::StackName}'
      RoleName: !Sub 'EmojicoinContainerRole-${AWS::StackName}'
    Type: 'AWS::IAM::Role'
  # Security group for ECS containers.
  ContainerSecurityGroup:
    Condition: 'MaybeDeployContainers'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      # Allow all outbound traffic, to other resources and to Docker Hub.
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Database cluster.
  DbCluster:
    Condition: 'MaybeDeployDb'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - 'W2501'
    Properties:
      DBSubnetGroupName: !Ref 'DbSubnetGroup'
      DatabaseName: !FindInMap
      - 'Constants'
      - 'DatabaseConfig'
      - 'DatabaseName'
      Engine: 'aurora-postgresql'
      EngineMode: 'provisioned'
      EngineVersion: '16.2'
      MasterUserPassword: !FindInMap
      - 'Constants'
      - 'DatabaseConfig'
      - 'MasterPassword'
      MasterUsername: !FindInMap
      - 'Constants'
      - 'DatabaseConfig'
      - 'MasterUsername'
      Port: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'DatabasePort'
      ServerlessV2ScalingConfiguration:
        MaxCapacity: !Ref 'DbMaxCapacity'
        MinCapacity: !Ref 'DbMinCapacity'
      VpcSecurityGroupIds:
      - !Ref 'DbSecurityGroup'
    Type: 'AWS::RDS::DBCluster'
  # Primary (writer) database instance.
  DbInstancePrimary:
    Condition: 'MaybeDeployDb'
    Properties:
      DBClusterIdentifier: !Ref 'DbCluster'
      DBInstanceClass: 'db.serverless'
      Engine: 'aurora-postgresql'
    Type: 'AWS::RDS::DBInstance'
  # Replica (reader) database instance.
  DbInstanceReplica:
    Condition: 'MaybeDeployDb'
    Properties:
      DBClusterIdentifier: !Ref 'DbCluster'
      DBInstanceClass: 'db.serverless'
      Engine: 'aurora-postgresql'
    Type: 'AWS::RDS::DBInstance'
  # Security group for the database itself.
  DbSecurityGroup:
    Condition: 'MaybeDeployDb'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the database's security group, separated to eliminate
  # circular dependencies with security group for users of the database.
  DbSecurityGroupIngress:
    Condition: 'MaybeDeployDb'
    Properties:
      GroupId: !Ref 'DbSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'DbUserSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Database subnet group.
  DbSubnetGroup:
    Condition: 'MaybeDeployDb'
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds:
      - !Ref 'PrivateSubnetA'
      - !Ref 'PrivateSubnetB'
      - !Ref 'PrivateSubnetC'
    Type: 'AWS::RDS::DBSubnetGroup'
  # Security group for users of the database.
  DbUserSecurityGroup:
    Condition: 'MaybeDeployDb'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'DbSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Association for private route table with each private subnet.
  Fn::ForEach::PrivateRouteTableAssociation:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - PrivateRouteTableAssociation${Identifier}:
      Properties:
        RouteTableId: !Ref 'PrivateRouteTable'
        SubnetId: !Ref
          Fn::Sub:
          - 'PrivateSubnet${Identifier}'
          - Identifier: !Ref 'Identifier'
      # ForEach transforms require that condition is second key or later.
      # yamllint disable-line rule:key-ordering
      Condition: 'MaybeDeployRouteTables'
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
  # A private subnet for each of the database availability zones.
  Fn::ForEach::PrivateSubnet:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - PrivateSubnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'PrivateSubnets'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'PrivateSubnets'
        - Ref: 'Identifier'
        - 'CidrBlock'
        MapPublicIpOnLaunch: false
        VpcId: !Ref 'Vpc'
      # ForEach transforms require that condition is second key or later.
      # yamllint disable-line rule:key-ordering
      Condition: 'MaybeDeployVpc'
      Type: 'AWS::EC2::Subnet'
  # Association for public route table with each public subnet.
  Fn::ForEach::PublicRouteTableAssociation:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - PublicRouteTableAssociation${Identifier}:
      Properties:
        RouteTableId: !Ref 'PublicRouteTable'
        SubnetId: !Ref
          Fn::Sub:
          - 'PublicSubnet${Identifier}'
          - Identifier: !Ref 'Identifier'
      # ForEach transforms require that condition is second key or later.
      # yamllint disable-line rule:key-ordering
      Condition: 'MaybeDeployRouteTables'
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
  # A public subnet for each availability zone.
  Fn::ForEach::PublicSubnet:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - PublicSubnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'PublicSubnets'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'PublicSubnets'
        - Ref: 'Identifier'
        - 'CidrBlock'
        MapPublicIpOnLaunch: true
        VpcId: !Ref 'Vpc'
      # ForEach transforms require that condition is second key or later.
      # yamllint disable-line rule:key-ordering
      Condition: 'MaybeDeployVpc'
      Type: 'AWS::EC2::Subnet'
  # Internet gateway for the virtual private cloud.
  InternetGateway:
    Condition: 'MaybeDeployVpc'
    Type: 'AWS::EC2::InternetGateway'
  # Attachment of internet gateway to the virtual private cloud.
  InternetGatewayAttachment:
    Condition: 'MaybeDeployVpc'
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::VPCGatewayAttachment'
  # Network address translation gateway for the virtual private cloud.
  NatGateway:
    Condition: 'MaybeDeployVpc'
    Properties:
      AllocationId: !GetAtt 'NatGatewayEip.AllocationId'
      SubnetId: !Ref 'PublicSubnetA'
    Type: 'AWS::EC2::NatGateway'
  # Elastic IP address for the network address translation gateway.
  NatGatewayEip:
    Condition: 'MaybeDeployVpc'
    Properties:
      Domain: 'vpc'
    Type: 'AWS::EC2::EIP'
  # Target group for application load balancer traffic to PostgREST.
  PostgrestAlbTargetGroup:
    Condition: 'MaybeDeployAlb'
    DependsOn: 'Alb'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: '/ready'
      HealthCheckPort: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'PostgrestHealthCheckPort'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Name: !Sub '${AWS::StackName}-postgrest'
      Port: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'PostgrestPort'
      Protocol: 'HTTP'
      ProtocolVersion: 'HTTP1'
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: '30'
      - Key: 'stickiness.enabled'
        Value: 'false'
      - Key: 'load_balancing.algorithm.type'
        Value: 'round_robin'
      TargetType: 'ip'
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'Vpc'
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  # Scaling policy for PostgREST service.
  PostgrestAutoScalingPolicy:
    Condition: 'MaybeDeployPostgrest'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-postgrest'
      PolicyType: 'TargetTrackingScaling'
      ScalingTargetId: !Ref 'PostgrestAutoScalingTarget'
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: 'ECSServiceAverageCPUUtilization'
        ScaleInCooldown: 300
        ScaleOutCooldown: 60
        TargetValue: 70
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
  # Scalable target for PostgREST service.
  PostgrestAutoScalingTarget:
    Condition: 'MaybeDeployPostgrest'
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Join
      - '/'
      - - 'service'
        - !Ref 'ContainerCluster'
        - !GetAtt 'PostgrestRunner.Name'
      RoleARN: !GetAtt 'ContainerRole.Arn'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
  # Security group for PostgREST clients.
  PostgrestClientSecurityGroup:
    Condition: 'MaybeDeployPostgrest'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'PostgrestServerSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Service for running PostgREST.
  PostgrestRunner:
    Condition: 'MaybeDeployPostgrest'
    DependsOn:
    # Wait for both database instances to ensure cluster is fully available.
    - 'DbInstancePrimary'
    - 'DbInstanceReplica'
    # Wait for processor to ensure that migrations have been run, so that the
    # schema will be available and load balancer health checks will pass.
    - 'ProcessorRunner'
    # Wait until there is an outbound route to get the image from the
    # pull through cache.
    - 'PrivateRouteTableAssociationA'
    - 'PrivateRouteTableAssociationB'
    - 'PrivateRouteTableAssociationC'
    - 'PrivateRouteThroughNatGateway'
    # Proxy for a conditional dependency on the application load balancer
    # listener, which associates the PostgREST target group with the balancer.
    Metadata:
      ConditionalDependencyProxy: !If
      - 'MaybeDeployAlb'
      - !Ref 'AlbListener'
      - ''
    Properties:
      Cluster: !Ref 'ContainerCluster'
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      LaunchType: 'FARGATE'
      LoadBalancers: !If
      - 'MaybeDeployAlb'
      - - ContainerName: !Sub '${AWS::StackName}-postgrest'
          ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'PostgrestPort'
          TargetGroupArn: !Ref 'PostgrestAlbTargetGroup'
      - !Ref 'AWS::NoValue'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !Ref 'DbUserSecurityGroup'
          - !Ref 'PostgrestServerSecurityGroup'
          - !Ref 'ContainerSecurityGroup'
          Subnets:
          - !Ref 'PrivateSubnetA'
          - !Ref 'PrivateSubnetB'
          - !Ref 'PrivateSubnetC'
      ServiceRegistries:
      - RegistryArn: !GetAtt 'PostgrestServiceDiscovery.Arn'
      TaskDefinition: !Ref 'PostgrestTask'
    Type: 'AWS::ECS::Service'
  # Security group for the PostgREST server.
  PostgrestServerSecurityGroup:
    Condition: 'MaybeDeployPostgrest'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the PostgREST server security group.
  PostgrestServerSecurityGroupIngress:
    Condition: 'MaybeDeployPostgrest'
    Properties:
      GroupId: !Ref 'PostgrestServerSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'PostgrestClientSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Service discovery for PostgREST.
  PostgrestServiceDiscovery:
    Condition: 'MaybeDeployPostgrest'
    Properties:
      DnsConfig:
        DnsRecords:
        - TTL: 10
          Type: 'A'
        RoutingPolicy: 'MULTIVALUE'
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Sub '${AWS::StackName}-postgrest'
      NamespaceId: !Ref 'PrivateServiceDiscoveryNamespace'
    Type: 'AWS::ServiceDiscovery::Service'
  # Task definition for PostgREST.
  PostgrestTask:
    Condition: 'MaybeDeployPostgrest'
    DependsOn: 'ContainerLogGroup'
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: 'PGRST_ADMIN_SERVER_PORT'
          Value: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'PostgrestHealthCheckPort'
        - Name: 'PGRST_DB_URI'
          Value: !Join
          - ''
          - - 'postgres://'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
            - ':'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterPassword'
            - '@'
            # While the PostgREST endpoint is configured to support read-only
            # operations, the PostgREST listener errors out when connected to
            # a read replica because it relies on `LISTEN` and `NOTIFY`
            # commands, which do not work on read replicas. Hence it is
            # connected to the writer endpoint.
            - !GetAtt 'DbCluster.Endpoint.Address'
            - '/'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
        - Name: 'PGRST_DB_ANON_ROLE'
          Value: 'web_anon'
        - Name: 'PGRST_DB_MAX_ROWS'
          Value: !Ref 'PostgrestMaxRows'
        Image: !Join
        - ''
        - - !Ref 'AWS::AccountId'
          - '.dkr.ecr.'
          - !Ref 'AWS::Region'
          - '.amazonaws.com/'
          - !FindInMap
            - 'Constants'
            - 'ImageCache'
            - 'RepositoryPrefix'
          - '/postgrest/postgrest:'
          - !Ref 'PostgrestImageVersion'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Join
            - ''
            - - '/'
              - !FindInMap
                - 'Constants'
                - 'Logging'
                - 'Prefix'
              - '/'
              - !Ref 'AWS::StackName'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !FindInMap
            - 'Constants'
            - 'Logging'
            - 'Prefix'
        Name: !Sub '${AWS::StackName}-postgrest'
        PortMappings:
        - ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'PostgrestPort'
          HostPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'PostgrestPort'
        - ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'PostgrestHealthCheckPort'
          HostPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'PostgrestHealthCheckPort'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ContainerRole.Arn'
      Family: !Ref 'AWS::StackName'
      Memory: '512'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
      - 'FARGATE'
    Type: 'AWS::ECS::TaskDefinition'
  # Route table for private subnets in the virtual private cloud.
  PrivateRouteTable:
    Condition: 'MaybeDeployRouteTables'
    Properties:
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::RouteTable'
  # Route from private subnets through network address translation gateway.
  PrivateRouteThroughNatGateway:
    Condition: 'MaybeDeployRouteTables'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway'
      RouteTableId: !Ref 'PrivateRouteTable'
    Type: 'AWS::EC2::Route'
  # Private DNS namespace for internal service discovery.
  PrivateServiceDiscoveryNamespace:
    Condition: 'MaybeDeployVpc'
    Properties:
      Description: !Ref 'AWS::StackName'
      Name: !Ref 'AWS::StackName'
      Vpc: !Ref 'Vpc'
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
  # Security group for the processor's WebSocket server.
  ProcessorPublisherSecurityGroup:
    Condition: 'MaybeDeployVpc'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the processor's WebSocket server security group.
  ProcessorPublisherSecurityGroupIngress:
    Condition: 'MaybeDeployProcessor'
    Properties:
      GroupId: !Ref 'ProcessorPublisherSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'ProcessorWsClientSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Service for running the processor.
  ProcessorRunner:
    Condition: 'MaybeDeployProcessor'
    DependsOn:
    # Pending instance creation, the cluster endpoint is defined but not
    # available, so the service will not be able to connect to the database.
    - 'DbInstancePrimary'
    - 'DbInstanceReplica'
    # Wait until there is an outbound route to get the image from the
    # pull through cache.
    - 'PrivateRouteTableAssociationA'
    - 'PrivateRouteTableAssociationB'
    - 'PrivateRouteTableAssociationC'
    - 'PrivateRouteThroughNatGateway'
    Properties:
      Cluster: !Ref 'ContainerCluster'
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      LaunchType: 'FARGATE'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !Ref 'ContainerSecurityGroup'
          - !Ref 'DbUserSecurityGroup'
          - !Ref 'ProcessorPublisherSecurityGroup'
          Subnets:
          - !Ref 'PrivateSubnetA'
          - !Ref 'PrivateSubnetB'
          - !Ref 'PrivateSubnetC'
      ServiceRegistries:
      - RegistryArn: !GetAtt 'ProcessorServiceDiscovery.Arn'
      TaskDefinition: !Ref 'ProcessorTask'
    Type: 'AWS::ECS::Service'
  # Service discovery for the processor.
  ProcessorServiceDiscovery:
    Condition: 'MaybeDeployProcessor'
    Properties:
      DnsConfig:
        DnsRecords:
        - TTL: 10
          Type: 'A'
        RoutingPolicy: 'MULTIVALUE'
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Sub '${AWS::StackName}-processor'
      NamespaceId: !Ref 'PrivateServiceDiscoveryNamespace'
    Type: 'AWS::ServiceDiscovery::Service'
  # Task definition for processor.
  ProcessorTask:
    Condition: 'MaybeDeployProcessor'
    DependsOn: 'ContainerLogGroup'
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: 'DATABASE_URL'
          Value: !Join
          - ''
          - - 'postgres://'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
            - ':'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterPassword'
            - '@'
            - !GetAtt 'DbCluster.Endpoint.Address'
            - '/'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
        - Name: 'GRPC_DATA_SERVICE_URL'
          Value: !Sub
          - '{{resolve:ssm:/emojicoin/grpc-data-service-url/${Network}}}'
          - Network: !Ref 'Network'
        - Name: 'MINIMUM_STARTING_VERSION'
          Value: !Sub
          - '{{resolve:ssm:/emojicoin/minimum-starting-version/${Network}}}'
          - Network: !Ref 'Network'
        - Name: 'EMOJICOIN_MODULE_ADDRESS'
          Value: !Sub
          - '{{resolve:ssm:/emojicoin/package-address/${Network}}}'
          - Network: !Ref 'Network'
        - Name: 'WS_PORT'
          Value: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'ProcessorWebsocketPort'
        HealthCheck:
          Command:
          - 'CMD'
          - 'curl'
          - '--fail'
          - 'http://localhost:8084/metrics'
          Interval: 5
          Retries: 1
          StartPeriod: 0
          Timeout: 2
        Image: !Join
        - ''
        - - !Ref 'AWS::AccountId'
          - '.dkr.ecr.'
          - !Ref 'AWS::Region'
          - '.amazonaws.com/'
          - !FindInMap
            - 'Constants'
            - 'ImageCache'
            - 'RepositoryPrefix'
          - '/econialabs/emojicoin-dot-fun-indexer-processor:'
          - !Ref 'ProcessorImageVersion'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Join
            - ''
            - - '/'
              - !FindInMap
                - 'Constants'
                - 'Logging'
                - 'Prefix'
              - '/'
              - !Ref 'AWS::StackName'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: !FindInMap
            - 'Constants'
            - 'Logging'
            - 'Prefix'
        Name: !Sub '${AWS::StackName}-processor'
        PortMappings:
        - ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'ProcessorWebsocketPort'
          HostPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'ProcessorWebsocketPort'
        Secrets:
        - Name: 'GRPC_AUTH_TOKEN'
          ValueFrom: !Sub
          - 'arn:aws:secretsmanager:${Region}:${Account}:secret:${Secret}'
          - Account: !Ref 'AWS::AccountId'
            Region: !Ref 'AWS::Region'
            Secret: 'emojicoin/grpc-auth-token'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ContainerRole.Arn'
      Family: !Ref 'AWS::StackName'
      Memory: '512'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
      - 'FARGATE'
    Type: 'AWS::ECS::TaskDefinition'
  # Security group for clients of the processor's WebSocket server.
  ProcessorWsClientSecurityGroup:
    Condition: 'MaybeDeployProcessor'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'ProcessorPublisherSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Route table for public subnets in the virtual private cloud.
  PublicRouteTable:
    Condition: 'MaybeDeployRouteTables'
    Properties:
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::RouteTable'
  # Route from public subnets through the internet gateway.
  PublicRouteToInternet:
    Condition: 'MaybeDeployRouteTables'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: 'AWS::EC2::Route'
  # Virtual private cloud for internal networking.
  Vpc:
    Condition: 'MaybeDeployVpc'
    Properties:
      CidrBlock: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'VpcCidrBlock'
      EnableDnsHostnames: true
      EnableDnsSupport: true
    Type: 'AWS::EC2::VPC'
Transform: 'AWS::LanguageExtensions'
...
