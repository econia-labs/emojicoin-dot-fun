services:
  aptos-node:
    network_mode: host
    build:
      context: ../../
      dockerfile: src/docker/aptos-node/Dockerfile
    ports:
      - "50051:50051"
      - "8070:8070"
      - "8090:8090"
      - "8080:8080"
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: ["bash", "/app/run-fullnode.sh"]
    # In order to start the node with the indexer API; i.e., run
    # `aptos node run-local-testnet --with-indexer-api`, we must
    # mount the Docker socket to the container.
    # This effectively allows the container to start a new container.
    # Note that this is not Docker-in-Docker, but rather
    # Docker-outside-Docker, where the container acts as the host in
    # terms of orchestrating other containers.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  move:
    extra_hosts:
      - "host.docker.internal:host-gateway"
    build:
      context: ../../
      dockerfile: src/docker/aptos-node/Dockerfile
    environment:
      PUBLISHER_PK: "${PUBLISHER_PK}"
      BIG_MONEY_GUY_PK: "${BIG_MONEY_GUY_PK}"
      EMOJICOIN_MODULE_ADDRESS: "${EMOJICOIN_MODULE_ADDRESS}"
    depends_on:
      aptos-node:
        condition: service_healthy
    command: ["bash", "/app/initialize-contract.sh"]

  processor:
    depends_on:
      move:
        condition: service_completed_successfully
