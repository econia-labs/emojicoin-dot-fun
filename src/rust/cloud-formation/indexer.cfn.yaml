---
Mappings:
  Constants:
    # These compromised credentials are not a security risk because access to
    # the database is restricted to security groups in the VPC.
    DatabaseCredentials:
      MasterPassword: 'postgres'
      MasterUsername: 'postgres'
    Networking:
      VpcCidrBlock: '10.0.0.0/16'
  Subnets:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.1.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.2.0/24'
    C:
      AvailabilityZone: 2
      CidrBlock: '10.0.3.0/24'
    Public:
      AvailabilityZone: 0
      CidrBlock: '10.0.0.0/24'
Outputs:
  BastionHostId:
    Description: 'The instance ID of the bastion host.'
    Value: !Ref 'BastionHost'
  DbClusterEndpoint:
    Description: 'The database cluster connection endpoint.'
    Value: !GetAtt 'DbCluster.Endpoint.Address'
  DbClusterReaderEndpoint:
    Description: 'The database cluster reader connection endpoint.'
    Value: !GetAtt 'DbCluster.ReadEndpoint.Address'
Parameters:
  BastionHostAmiId:
    Default: 'ami-030cb86c12b18e236'
    Type: 'AWS::EC2::Image::Id'
  DatabasePort:
    Default: 5432
    Type: 'Number'
  DbMaxCapacity:
    Default: 4
    Type: 'Number'
  DbMinCapacity:
    Default: 0.5
    Type: 'Number'
Resources:
  # Minimal VM for accessing the database.
  BastionHost:
    Properties:
      ImageId: !Ref 'BastionHostAmiId'
      InstanceType: 't4g.nano'
      NetworkInterfaces:
      - DeviceIndex: 0
        GroupSet:
        - !Ref 'BastionHostSecurityGroup'
        - !Ref 'DbUserSecurityGroup'
        SubnetId: !Ref 'PublicSubnet'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          amazon-linux-extras enable postgresql14
          yum clean metadata
          yum install -y postgresql
    Type: 'AWS::EC2::Instance'
  # Connection endpoint allowing access to the bastion host.
  BastionHostConnectionEndpoint:
    Properties:
      PreserveClientIp: true
      SecurityGroupIds:
      - !Ref 'BastionHostConnectionEndpointSecurityGroup'
      SubnetId: !Ref 'SubnetA'
    Type: 'AWS::EC2::InstanceConnectEndpoint'
  # Security group for bastion host connection endpoint.
  BastionHostConnectionEndpointSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'BastionHostSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Security group for the bastion host.
  BastionHostSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the bastion host security group, separated to eliminate
  # circular dependencies with the security group for the connection endpoint.
  BastionHostSecurityGroupIngress:
    Properties:
      GroupId: !Ref 'BastionHostSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId:
        !Ref 'BastionHostConnectionEndpointSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Database cluster.
  DbCluster:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - 'W2501'
    Properties:
      DBSubnetGroupName: !Ref 'DbSubnetGroup'
      Engine: 'aurora-postgresql'
      EngineMode: 'provisioned'
      EngineVersion: '16.2'
      MasterUserPassword: !FindInMap
      - 'Constants'
      - 'DatabaseCredentials'
      - 'MasterPassword'
      MasterUsername: !FindInMap
      - 'Constants'
      - 'DatabaseCredentials'
      - 'MasterUsername'
      Port: !Ref 'DatabasePort'
      ServerlessV2ScalingConfiguration:
        MaxCapacity: !Ref 'DbMaxCapacity'
        MinCapacity: !Ref 'DbMinCapacity'
      VpcSecurityGroupIds:
      - !Ref 'DbSecurityGroup'
    Type: 'AWS::RDS::DBCluster'
  # Database instance.
  DbInstance:
    Properties:
      DBClusterIdentifier: !Ref 'DbCluster'
      DBInstanceClass: 'db.serverless'
      Engine: 'aurora-postgresql'
    Type: 'AWS::RDS::DBInstance'
  # Security group for the database itself.
  DbSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the database's security group, separated to eliminate
  # circular dependencies with security group for users of the database.
  DbSecurityGroupIngress:
    Properties:
      GroupId: !Ref 'DbSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'DbUserSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Database subnet group.
  DbSubnetGroup:
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds:
      - !Ref 'SubnetA'
      - !Ref 'SubnetB'
      - !Ref 'SubnetC'
    Type: 'AWS::RDS::DBSubnetGroup'
  # Security group for users of the database.
  DbUserSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'DbSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # An outbound internet traffic route association for each subnet.
  Fn::ForEach::PrivateRouteTableAssociation:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - PrivateRouteTableAssociation${Identifier}:
      Properties:
        RouteTableId: !Ref 'PrivateRouteTable'
        SubnetId: !Ref
          Fn::Sub:
          - 'Subnet${Identifier}'
          - Identifier: !Ref 'Identifier'
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
  # A private subnet for each of the database availability zones.
  Fn::ForEach::Subnet:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - Subnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'Subnets'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'Subnets'
        - Ref: 'Identifier'
        - 'CidrBlock'
        MapPublicIpOnLaunch: false
        VpcId: !Ref 'Vpc'
      Type: 'AWS::EC2::Subnet'
  # Internet gateway for the virtual private cloud.
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  # Attachment of internet gateway to the virtual private cloud.
  InternetGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::VPCGatewayAttachment'
  # Network address translation gateway for the virtual private cloud.
  NatGateway:
    Properties:
      AllocationId: !GetAtt 'NatGatewayEip.AllocationId'
      SubnetId: !Ref 'PublicSubnet'
    Type: 'AWS::EC2::NatGateway'
  # Elastic IP address for the network address translation gateway.
  NatGatewayEip:
    Properties:
      Domain: 'vpc'
    Type: 'AWS::EC2::EIP'
  # Route table for private subnets in the virtual private cloud.
  PrivateRouteTable:
    Properties:
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::RouteTable'
  # Route route for the public subnet in the virtual private cloud.
  PublicRouteTable:
    Properties:
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::RouteTable'
  # Association between public route table and public subnet.
  PublicRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet'
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  # Public subnet for the virtual private cloud, for internet access.
  PublicSubnet:
    Properties:
      AvailabilityZone: !Select
      - !FindInMap
        - 'Subnets'
        - 'Public'
        - 'AvailabilityZone'
      - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap
      - 'Subnets'
      - 'Public'
      - 'CidrBlock'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::Subnet'
  # Route to the internet for the public subnet.
  RouteToInternet:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: 'AWS::EC2::Route'
  # Route to the network address translation gateway for private subnets.
  RouteToNatGateway:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway'
      RouteTableId: !Ref 'PrivateRouteTable'
    Type: 'AWS::EC2::Route'
  # Virtual private cloud for internal networking.
  Vpc:
    Properties:
      CidrBlock: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'VpcCidrBlock'
      EnableDnsHostnames: true
      EnableDnsSupport: true
    Type: 'AWS::EC2::VPC'
Transform: 'AWS::LanguageExtensions'
...
