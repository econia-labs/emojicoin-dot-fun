---
Conditions:
  ProvisionBastionHost: !Equals
  - !Ref 'ProvisionBastionHost'
  - 'true'
  ProvisionProcessor: !Equals
  - !Ref 'ProvisionProcessor'
  - 'true'
Mappings:
  Constants:
    # These compromised credentials are not a security risk because access to
    # the database is restricted to security groups in the VPC.
    DatabaseConfig:
      DatabaseName: 'emojicoin'
      MasterPassword: 'emojicoin'
      MasterUsername: 'emojicoin'
    Networking:
      BrokerPort: 3009
      DatabasePort: 5432
      ProcessorWebsocketPort: 3008
      VpcCidrBlock: '10.0.0.0/16'
    Websocat:
      Build: 'websocat.aarch64-unknown-linux-musl'
      ReleaseUrlBase: 'https://github.com/vi/websocat/releases/download'
      Version: 'v1.13.0'
  Subnets:
    A:
      AvailabilityZone: 0
      CidrBlock: '10.0.1.0/24'
    B:
      AvailabilityZone: 1
      CidrBlock: '10.0.2.0/24'
    C:
      AvailabilityZone: 2
      CidrBlock: '10.0.3.0/24'
    Public:
      AvailabilityZone: 0
      CidrBlock: '10.0.0.0/24'
Outputs:
  BastionHostId:
    Condition: 'ProvisionBastionHost'
    Description: 'The instance ID of the bastion host.'
    Value: !Ref 'BastionHost'
  DbClusterEndpoint:
    Description: 'The database cluster connection endpoint.'
    Value: !GetAtt 'DbCluster.Endpoint.Address'
  DbClusterReaderEndpoint:
    Description: 'The database cluster reader connection endpoint.'
    Value: !GetAtt 'DbCluster.ReadEndpoint.Address'
Parameters:
  BastionHostAmiId:
    Default: 'ami-030cb86c12b18e236'
    Type: 'AWS::EC2::Image::Id'
  BrokerImageVersion:
    Type: 'String'
  DbMaxCapacity:
    Default: 4
    Type: 'Number'
  DbMinCapacity:
    Default: 0.5
    Type: 'Number'
  EmojicoinModuleAddress:
    Type: 'String'
  GrpcDataServiceUrl:
    Type: 'String'
  MinimumStartingVersion:
    Type: 'Number'
  ProcessorImageVersion:
    Type: 'String'
  ProvisionBastionHost:
    Default: 'false'
    Type: 'String'
  ProvisionProcessor:
    Default: 'true'
    Type: 'String'
Resources:
  # Minimal VM for monitoring internal processes.
  BastionHost:
    Condition: 'ProvisionBastionHost'
    Properties:
      ImageId: !Ref 'BastionHostAmiId'
      InstanceType: 't4g.nano'
      NetworkInterfaces:
      - DeviceIndex: 0
        GroupSet:
        - !Ref 'BastionHostSecurityGroup'
        - !Ref 'DbUserSecurityGroup'
        - !Ref 'ProcessorWsClientSecurityGroup'
        SubnetId: !Ref 'SubnetA'
      UserData:
        # Install PostgreSQL client & websocat, set connection string variable.
        Fn::Base64: !Sub
        - |
            #!/bin/bash
            yum update -y
            amazon-linux-extras enable postgresql14
            yum clean metadata
            yum install -y postgresql
            wget ${WebsocatReleaseUrlBase}/${WebsocatVersion}/${WebsocatBuild}
            chmod +x ${WebsocatBuild}
            mv ${WebsocatBuild} /usr/local/bin/websocat
            echo 'export DB_URL="${DatabaseUrl}"' >> /etc/profile
            echo '${ProcessorWsUrlExport}' >> /etc/profile
        - DatabaseUrl: !Join
          - ''
          - - 'postgres://'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
            - ':'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterPassword'
            - '@'
            - !GetAtt 'DbCluster.Endpoint.Address'
            - '/'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'DatabaseName'
          ProcessorWsUrlExport: !If
          - 'ProvisionProcessor'
          - !Join
            - ''
            - - 'export PROCESSOR_WS_URL="ws://'
              - !GetAtt 'ProcessorServiceDiscovery.Name'
              - '.'
              - !Ref 'AWS::StackName'
              - ':'
              - !FindInMap
                - 'Constants'
                - 'Networking'
                - 'ProcessorWebsocketPort'
              - '/ws"'
          - '# PROCESSOR_WS_URL not set (processor not provisioned)'
          WebsocatBuild: !FindInMap
          - 'Constants'
          - 'Websocat'
          - 'Build'
          WebsocatReleaseUrlBase: !FindInMap
          - 'Constants'
          - 'Websocat'
          - 'ReleaseUrlBase'
          WebsocatVersion: !FindInMap
          - 'Constants'
          - 'Websocat'
          - 'Version'
    Type: 'AWS::EC2::Instance'
  # Connection endpoint allowing access to the bastion host.
  BastionHostConnectionEndpoint:
    Condition: 'ProvisionBastionHost'
    Properties:
      PreserveClientIp: true
      SecurityGroupIds:
      - !Ref 'BastionHostConnectionEndpointSecurityGroup'
      SubnetId: !Ref 'SubnetA'
    Type: 'AWS::EC2::InstanceConnectEndpoint'
  # Security group for bastion host connection endpoint.
  BastionHostConnectionEndpointSecurityGroup:
    Condition: 'ProvisionBastionHost'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'BastionHostSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Security group for the bastion host.
  BastionHostSecurityGroup:
    Condition: 'ProvisionBastionHost'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the bastion host security group, separated to eliminate
  # circular dependencies with the security group for the connection endpoint.
  BastionHostSecurityGroupIngress:
    Condition: 'ProvisionBastionHost'
    Properties:
      GroupId: !Ref 'BastionHostSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId:
        !Ref 'BastionHostConnectionEndpointSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Task definition for the broker.
  BrokerTask:
    Condition: 'ProvisionProcessor'
    DependsOn: 'ContainerLogGroup'
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: 'PROCESSOR_WS_URL'
          Value: !Join
          - ''
          - - 'ws://'
            - !GetAtt 'ProcessorServiceDiscovery.Name'
            - '.'
            - !Ref 'AWS::StackName'
            - ':'
            - !FindInMap
              - 'Constants'
              - 'Networking'
              - 'ProcessorWebsocketPort'
            - '/ws"'
        - Name: 'PORT'
          Value: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'BrokerPort'
        - Name: 'RUST_LOG'
          Value: 'info'
        HealthCheck:
          Command:
          - 'CMD-SHELL'
          - !Sub
            - 'curl -f http://localhost:${PORT}/ || exit 1'
            - PORT: !FindInMap
              - 'Constants'
              - 'Networking'
              - 'BrokerPort'
          Interval: 10
          Retries: 3
          StartPeriod: 10
          Timeout: 2
        Image: !Join
        - ''
        - - 'econialabs/emojicoin-dot-fun-indexer-broker:'
          - !Ref 'BrokerImageVersion'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Sub '/ecs/${AWS::StackName}'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'ecs'
        Name: !Sub '${AWS::StackName}-processor'
        PortMappings:
        - ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'BrokerPort'
          HostPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'BrokerPort'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ContainerRole.Arn'
      Family: !Ref 'AWS::StackName'
      Memory: '512'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
      - 'FARGATE'
    Type: 'AWS::ECS::TaskDefinition'
  # Cluster for running ECS containers.
  ContainerCluster:
    Type: 'AWS::ECS::Cluster'
  # Log group for ECS task logging.
  ContainerLogGroup:
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}'
      RetentionInDays: 14
    Type: 'AWS::Logs::LogGroup'
  # Role with assorted permissions required to run containers.
  ContainerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: 'Allow'
          Principal:
            Service: 'ecs-tasks.amazonaws.com'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - 'ecr:GetDownloadUrlForLayer'
            - 'ecr:BatchGetImage'
            - 'ecr:BatchCheckLayerAvailability'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Effect: 'Allow'
            Resource: '*'
        PolicyName: !Sub 'ContainerRolePolicy-${AWS::StackName}'
      - PolicyDocument:
          Statement:
          - Action:
            - 'secretsmanager:GetSecretValue'
            Effect: 'Allow'
            Resource: !Join
            - ''
            - - 'arn:aws:secretsmanager:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':secret:GRPC_AUTH_TOKEN-*'
        PolicyName: !Sub 'ContainerRoleSecretsPolicy-${AWS::StackName}'
    Type: 'AWS::IAM::Role'
  # Security group for ECS containers.
  ContainerSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      # Allow all outbound traffic, to other resources and to Docker Hub.
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Database cluster.
  DbCluster:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - 'W2501'
    Properties:
      DBSubnetGroupName: !Ref 'DbSubnetGroup'
      DatabaseName: !FindInMap
      - 'Constants'
      - 'DatabaseConfig'
      - 'DatabaseName'
      Engine: 'aurora-postgresql'
      EngineMode: 'provisioned'
      EngineVersion: '16.2'
      MasterUserPassword: !FindInMap
      - 'Constants'
      - 'DatabaseConfig'
      - 'MasterPassword'
      MasterUsername: !FindInMap
      - 'Constants'
      - 'DatabaseConfig'
      - 'MasterUsername'
      Port: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'DatabasePort'
      ServerlessV2ScalingConfiguration:
        MaxCapacity: !Ref 'DbMaxCapacity'
        MinCapacity: !Ref 'DbMinCapacity'
      VpcSecurityGroupIds:
      - !Ref 'DbSecurityGroup'
    Type: 'AWS::RDS::DBCluster'
  # Database instance.
  DbInstance:
    Properties:
      DBClusterIdentifier: !Ref 'DbCluster'
      DBInstanceClass: 'db.serverless'
      Engine: 'aurora-postgresql'
    Type: 'AWS::RDS::DBInstance'
  # Security group for the database itself.
  DbSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the database's security group, separated to eliminate
  # circular dependencies with security group for users of the database.
  DbSecurityGroupIngress:
    Properties:
      GroupId: !Ref 'DbSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'DbUserSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Database subnet group.
  DbSubnetGroup:
    Properties:
      DBSubnetGroupDescription: !Ref 'AWS::StackName'
      SubnetIds:
      - !Ref 'SubnetA'
      - !Ref 'SubnetB'
      - !Ref 'SubnetC'
    Type: 'AWS::RDS::DBSubnetGroup'
  # Security group for users of the database.
  DbUserSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'DbSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # An outbound internet traffic route association for each subnet.
  Fn::ForEach::PrivateRouteTableAssociation:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - PrivateRouteTableAssociation${Identifier}:
      Properties:
        RouteTableId: !Ref 'PrivateRouteTable'
        SubnetId: !Ref
          Fn::Sub:
          - 'Subnet${Identifier}'
          - Identifier: !Ref 'Identifier'
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
  # A private subnet for each of the database availability zones.
  Fn::ForEach::Subnet:
  - 'Identifier'
  - - 'A'
    - 'B'
    - 'C'
  - Subnet${Identifier}:
      Properties:
        AvailabilityZone: !Select
        - !FindInMap
          - 'Subnets'
          - Ref: 'Identifier'
          - 'AvailabilityZone'
        - Fn::GetAZs: !Ref 'AWS::Region'
        CidrBlock: !FindInMap
        - 'Subnets'
        - Ref: 'Identifier'
        - 'CidrBlock'
        MapPublicIpOnLaunch: false
        VpcId: !Ref 'Vpc'
      Type: 'AWS::EC2::Subnet'
  # Internet gateway for the virtual private cloud.
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  # Attachment of internet gateway to the virtual private cloud.
  InternetGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::VPCGatewayAttachment'
  # Network address translation gateway for the virtual private cloud.
  NatGateway:
    Properties:
      AllocationId: !GetAtt 'NatGatewayEip.AllocationId'
      SubnetId: !Ref 'PublicSubnet'
    Type: 'AWS::EC2::NatGateway'
  # Elastic IP address for the network address translation gateway.
  NatGatewayEip:
    Properties:
      Domain: 'vpc'
    Type: 'AWS::EC2::EIP'
  # Route table for private subnets in the virtual private cloud.
  PrivateRouteTable:
    Properties:
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::RouteTable'
  # Private DNS namespace for internal service discovery.
  PrivateServiceDiscoveryNamespace:
    Condition: 'ProvisionProcessor'
    Properties:
      Description: !Ref 'AWS::StackName'
      Name: !Ref 'AWS::StackName'
      Vpc: !Ref 'Vpc'
    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'
  # Security group for the processor's WebSocket server.
  ProcessorPublisherSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Ingress policy for the processor's WebSocket server security group.
  ProcessorPublisherSecurityGroupIngress:
    Properties:
      GroupId: !Ref 'ProcessorPublisherSecurityGroup'
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'ProcessorWsClientSecurityGroup'
    Type: 'AWS::EC2::SecurityGroupIngress'
  # Service for running the processor.
  ProcessorRunner:
    Condition: 'ProvisionProcessor'
    Properties:
      Cluster: !Ref 'ContainerCluster'
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      LaunchType: 'FARGATE'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
          - !Ref 'ContainerSecurityGroup'
          - !Ref 'DbUserSecurityGroup'
          - !Ref 'ProcessorPublisherSecurityGroup'
          Subnets:
          - !Ref 'SubnetA'
          - !Ref 'SubnetB'
          - !Ref 'SubnetC'
      ServiceRegistries:
      - RegistryArn: !GetAtt 'ProcessorServiceDiscovery.Arn'
      TaskDefinition: !Ref 'ProcessorTask'
    Type: 'AWS::ECS::Service'
  # Service discovery for the processor.
  ProcessorServiceDiscovery:
    Condition: 'ProvisionProcessor'
    Properties:
      DnsConfig:
        DnsRecords:
        - TTL: 10
          Type: 'A'
        RoutingPolicy: 'MULTIVALUE'
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: !Sub '${AWS::StackName}-processor'
      NamespaceId: !Ref 'PrivateServiceDiscoveryNamespace'
    Type: 'AWS::ServiceDiscovery::Service'
  # Task definition for processor.
  ProcessorTask:
    DependsOn: 'ContainerLogGroup'
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: 'DATABASE_URL'
          Value: !Join
          - ''
          - - 'postgres://'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
            - ':'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterPassword'
            - '@'
            - !GetAtt 'DbCluster.Endpoint.Address'
            - '/'
            - !FindInMap
              - 'Constants'
              - 'DatabaseConfig'
              - 'MasterUsername'
        - Name: 'GRPC_DATA_SERVICE_URL'
          Value: !Ref 'GrpcDataServiceUrl'
        - Name: 'MINIMUM_STARTING_VERSION'
          Value: !Ref 'MinimumStartingVersion'
        - Name: 'EMOJICOIN_MODULE_ADDRESS'
          Value: !Ref 'EmojicoinModuleAddress'
        - Name: 'WS_PORT'
          Value: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'ProcessorWebsocketPort'
        HealthCheck:
          Command:
          - 'CMD-SHELL'
          - 'curl -f http://localhost:8084/metrics || exit 1'
          Interval: 10
          Retries: 3
          StartPeriod: 10
          Timeout: 2
        Image: !Join
        - ''
        - - 'econialabs/emojicoin-dot-fun-indexer-processor:'
          - !Ref 'ProcessorImageVersion'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: !Sub '/ecs/${AWS::StackName}'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'ecs'
        Name: !Sub '${AWS::StackName}-processor'
        PortMappings:
        - ContainerPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'ProcessorWebsocketPort'
          HostPort: !FindInMap
          - 'Constants'
          - 'Networking'
          - 'ProcessorWebsocketPort'
        Secrets:
        - Name: 'GRPC_AUTH_TOKEN'
          ValueFrom: !Sub
          - 'arn:aws:secretsmanager:${Region}:${Account}:secret:${Secret}'
          - Account: !Ref 'AWS::AccountId'
            Region: !Ref 'AWS::Region'
            Secret: 'GRPC_AUTH_TOKEN'
      Cpu: '256'
      ExecutionRoleArn: !GetAtt 'ContainerRole.Arn'
      Family: !Ref 'AWS::StackName'
      Memory: '512'
      NetworkMode: 'awsvpc'
      RequiresCompatibilities:
      - 'FARGATE'
    Type: 'AWS::ECS::TaskDefinition'
  # Security group for clients of the processor's WebSocket server.
  ProcessorWsClientSecurityGroup:
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - DestinationSecurityGroupId: !Ref 'ProcessorPublisherSecurityGroup'
        IpProtocol: -1
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::SecurityGroup'
  # Route route for the public subnet in the virtual private cloud.
  PublicRouteTable:
    Properties:
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::RouteTable'
  # Association between public route table and public subnet.
  PublicRouteTableAssociation:
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'PublicSubnet'
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
  # Public subnet for the virtual private cloud, for internet access.
  PublicSubnet:
    Properties:
      AvailabilityZone: !Select
      - !FindInMap
        - 'Subnets'
        - 'Public'
        - 'AvailabilityZone'
      - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap
      - 'Subnets'
      - 'Public'
      - 'CidrBlock'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'Vpc'
    Type: 'AWS::EC2::Subnet'
  # Route to the internet for the public subnet.
  RouteToInternet:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: 'AWS::EC2::Route'
  # Route to the network address translation gateway for private subnets.
  RouteToNatGateway:
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway'
      RouteTableId: !Ref 'PrivateRouteTable'
    Type: 'AWS::EC2::Route'
  # Virtual private cloud for internal networking.
  Vpc:
    Properties:
      CidrBlock: !FindInMap
      - 'Constants'
      - 'Networking'
      - 'VpcCidrBlock'
      EnableDnsHostnames: true
      EnableDnsSupport: true
    Type: 'AWS::EC2::VPC'
Transform: 'AWS::LanguageExtensions'
...
